import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { gql, useQuery, useMutation, useLazyQuery } from "@apollo/client";
import { User } from "@prisma/client";
import { useState } from "react";

const AllUsersQuery = gql`
  query AllUsersQuery {
    users {
      id
      username
      email
      image
    }
  }
`;

const DeleteUserMutation = gql`
  mutation DeleteUserMutation($id: String!) {
    deleteUser(id: $id) {
      id
    }
  }
`;

const CreateUserMutation = gql`
  mutation CreateUserMutation(
    $username: String!
    $email: String!
    $password: String!
  ) {
    createUser(username: $username, email: $email, password: $password) {
      id
      username
      email
    }
  }
`;

const FindUserQuery = gql`
  query FindUserQuery($email: String!, $password: String!) {
    user(email: $email, password: $password) {
      id
      email
    }
  }
`;

const defaultParams: Partial<User> = {
  username: "",
  password: "",
  email: "",
};

const Home: NextPage = () => {
  const { data, loading, error, fetchMore } = useQuery(AllUsersQuery, {
    onError: (e) => {
      alert(`BAD: ${e.message}`);
    },
  });

  const [getUser, getUserQueryState] = useLazyQuery(FindUserQuery, {
    onCompleted: () => {
      fetchMore({});
    },
  });

  const [deleteUser, deleteUserMutationState] = useMutation(
    DeleteUserMutation,
    {
      onCompleted: () => {
        fetchMore({});
      },
    }
  );
  const [createUser, CreateUserMutationState] = useMutation(
    CreateUserMutation,
    {
      onCompleted: (data) => {
        fetchMore({});
        setCreateUserParams(defaultParams);
      },
      onError: (e) => {
        alert(`BAD: ${JSON.stringify(e.message)}`);
      },
    }
  );

  const [createUserParams, setCreateUserParams] =
    useState<Partial<User>>(defaultParams);

  const [findUserParams, setFindUserParams] =
    useState<Partial<User>>(defaultParams);

  const users: User[] = data?.users;

  if (loading) return <p>LOADING...</p>;
  // if (error) return <p>FUCK</p>;

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {error && <p>AAAAAAAAAAA</p>}
      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>
        <ul>
          {users &&
            users.map((user: User) => (
              <li key={user.id}>
                <div>
                  <p>{user.id}</p>
                  <p>{user.username}</p>
                  <p>{user.email}</p>
                  <p>{user.image}</p>
                </div>
                <button
                  disabled={deleteUserMutationState.loading}
                  onClick={(e) => {
                    e.preventDefault();
                    deleteUser({ variables: { id: user.id } });
                  }}
                >
                  Delete
                </button>
              </li>
            ))}
        </ul>

        <form
          onSubmit={(e) => {
            e.preventDefault();
            getUser({
              variables: findUserParams,
            });
          }}
        >
          <input
            type={"text"}
            placeholder={"Username"}
            value={findUserParams.username}
            onChange={(e) =>
              setFindUserParams({
                ...findUserParams,
                username: e.target.value,
              })
            }
          />
          <input
            type={"email"}
            placeholder={"Email"}
            value={findUserParams.email}
            onChange={(e) =>
              setFindUserParams({
                ...findUserParams,
                email: e.target.value,
              })
            }
          />
          <input
            type={"password"}
            placeholder={"Password"}
            value={findUserParams.password}
            onChange={(e) =>
              setFindUserParams({
                ...findUserParams,
                password: e.target.value,
              })
            }
          />
          <button>LOG IN</button>
        </form>

        <form
          onSubmit={(e) => {
            e.preventDefault();
            createUser({
              variables: createUserParams,
            });
          }}
        >
          <input
            type={"text"}
            placeholder={"Username"}
            value={createUserParams.username}
            onChange={(e) =>
              setCreateUserParams({
                ...createUserParams,
                username: e.target.value,
              })
            }
          />
          <input
            type={"email"}
            placeholder={"Email"}
            value={createUserParams.email}
            onChange={(e) =>
              setCreateUserParams({
                ...createUserParams,
                email: e.target.value,
              })
            }
          />
          <input
            type={"password"}
            placeholder={"Password"}
            value={createUserParams.password}
            onChange={(e) =>
              setCreateUserParams({
                ...createUserParams,
                password: e.target.value,
              })
            }
          />
          <button>REGISTER</button>
        </form>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Home;

/*
OBSTACLE
1. User authentication upon resource request
  - way to authenticate user whenever the request a resource

*/
